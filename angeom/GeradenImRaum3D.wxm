/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created by wxMaxima version 0.7.4 ] */

/* [wxMaxima: title   start ]
Berechnung der Lage zweier Geraden im Raum
   [wxMaxima: title   end   ] */

/* [wxMaxima: section start ]
Problembeschreibung
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
Prüfe auf lineare Abhängigkeit der Richtungsvektoren
Windschiefe Geraden:
Differenzvektor der Ortsvektoren auf 
Kreuzprodukt der Richtungsvektoren projizieren
Bei Abstand 0 Schnittpunkte berechnen
Parallele Geraden
Abstand eines Ortsvektors von der anderen Gerade berechnen
Kreuzprodukt aus Differenzvektor d und Richtungsvektor s bilden
Norm des Kreuzprodukts und des Richtungsvektors
Quotient ergibt Abstand
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
print("Geradenbeschreibung g=p+l*v ")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
G1:read("Eingabe ->> [[p1,p2,p3],[v1,v2,v3]]")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
g1(l):=G1[1]+l*G1[2];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
print("Geradenbeschreibung g=q+t*r ")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
G2:read("Eingabe ->> [[q1,q2,q3],[r1,r2,r3]]")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
g2(l):=G2[1]+l*G2[2];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
load("vect")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
linear:if G1[2][1]#0 then G2[2][1]/G1[2][1] elseif G1[2][2]#0 then G2[2][2]/G1[2][2]
  elseif G1[2][3]#0 then G2[2][3]/G1[2][3] else 0$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
if 
(
(G1[2][1]*linear=G2[2][1]) and 
(G1[2][2]*linear=G2[2][2]) and 
(G1[2][3]*linear=G2[2][3]) and 
(linear#0)
)
then (linear:true, print("Geraden sind parallel...")) else (linear:false)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
if not linear then(
    kp:express(G1[2]~G2[2]),
    lenkp:sqrt(kp.kp),
    dP:G1[1]-G2[1],
    Abstand:abs(kp[1]*dP[1]+kp[2]*dP[2]+kp[3]*dP[3])/lenkp,
    if Abstand#0 then(
        print("Abstand der windschiefen Geraden:",Abstand,float(Abstand))
    )
    else(
        lenkp:(G2[2][1]*G1[2][2]-G2[2][2]*G1[2][1]),
        lenkp:(G1[1][1]*G1[2][2]-G1[1][2]*G1[2][1]+G1[2][1]*G2[1][2]-G2[1][1]*G1[2][2])/lenkp,
        Abstand:[G2[1][1]+lenkp*G2[2][1],G2[1][2]+lenkp*G2[2][2],G2[1][3]+lenkp*G2[2][3]],
        print("Schnittpunkt der Geraden in S: ",Abstand,float(Abstand))
    )
)
else(
    print("paralle Geraden..."),
    dP:[G1[1][1]-G2[1][1],G1[1][2]-G2[1][2],G1[1][3]-G2[1][3]],
    kp:express(dP~G2[2]),
    Abstand:sqrt(kp.kp)/sqrt(G2[2].G2[2]),
    if Abstand#0 then(
        print("Abstand paralleler Geraden :",Abstand,float(Abstand))
    )
    else(
        print("Beide Geraden sind identisch!")
    )
)$
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
