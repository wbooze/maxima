/* replaced with builtin ctranspose 
 * qadjoint(m) := conjugate(transpose(m));
 */

/* The following three functions are not used and should probably
  be removed */
/* this does not work on all matrices */
diagonalize(A) := block( [uie],
   uie : uniteigenvectors(A),
   [transpose(apply(matrix,rest(uie,1))),part(uie,1)]);

diagonalization_op(A) := part(diagonalize(A),1);

/* return matrix formed by columns i1 through i2  from A*/
matcols(A,i1,i2) := mat_unblocker(matrix(map( lambda([i],col(A,i)), makelist(i,i,i1,i2))));

/* call: eg  matrix_function(A,'exp) */
/* Don't use this one. mat_function in package "diag" seems better */
/* furthermore, we should use leftmatrix and rightmatrix here */
matrix_function(A,'fun) := block([S,Si,D,domxexpt:true,i],
      S:diagonalization_op(A),
      iS:ctranspose(S),
      D: iS . A . S,
      for i:1 thru length(A) do
         D[i,i]:fun(D[i,i]),
      S . D . iS
);


/* the following use the mat_function defined in package 'diag' */
/* these are probably not useful */
matrix_exp(A) := mat_function(exp,A);
matrix_cos(A) := mat_function(cos,A);
matrix_sin(A) := mat_function(sin,A);
matrix_exp_trig(A) := matrix_cos(%i*A)-%i*matrix_sin(%i*A);
matrix_log(A) := mat_function(log,A);
matrix_sqrt(A) := mat_function(sqrt,A);


/* obsolete
 pauliexp([c]) :=
      matrix([c[4]+c[1],c[2]-%i*c[3]],[%i*c[3]+c[2],c[1]-c[4]]);

  invpauliexp(m) :=
    [m[2,2]+m[1,1],m[2,1]+m[1,2],%i*m[1,2]-%i*m[2,1],m[1,1]-m[2,2]]/2;

   /* this below is not quite right. not general enough */
   pauli_prod_exp(m) := apply(tensor_product,mapapply(pauliexp,m));
*/

