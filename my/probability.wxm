/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 14.09.0 ] */

/* [wxMaxima: input   start ] */
[H, T]; 
[HH, HT, TH, TT]; 
[HHH, HHT, HTH, HTT, THH, THT, TTH, TTT];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"take the second set above!";
"the 3/4 subset gives rise to 3/8 directly one can say, but on closer look ";
"HH->HHH, HHT, 2 cases";
"TH-> THH, THT, 1 case";
"HT-> HTH, HTT, 1 case";
"and TT does not give rise to any double occurances of H";
"so of the pure (HH, TT) one gives rise to 2, the other to none";
"of the mixed (HT, TH), each gives rise to 1";
"makes 2+1+1=4";
"4 of the generated set will have at least two Hs";
"the generated set is 8 elems so 4/8 = 1/2 of it accounts for the success case of what we want 
(at least two Hs)!";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
[1/2, 1/2];
[1/4, 1/4, 1/4, 1/4];
[1/8, 1/8, 1/8, 1/8, 1/8, 1/8, 1/8, 1/8];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"at least one H in 2 throws"; m:2^2;
1/4+1/4+1/4;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
1/2+1/4; 1-(1/2)^2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"at least two H in 3 throws";
1/8 + 1/8 + 1/8 + 1/8;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
1/2+1/4+1/8; 1-(1/8);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
1/2*1/4;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
1-(1/2)^2;
1-(1/2)^3;
7/8-3/4;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
1-(1/2)^2;
(1/2)^3;
1-(1/2)^3;
(1/2)^2+(1/2)^3;
1-(1/2)^3-((1/2)^2+(1/2)^3);
(1/2)^3+((1/2)^2+(1/2)^3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
P(X<=3 or X>=2)=P(X=3)+P(X>=2);
P(X=3)=binomial(3, 3)*(1/2)^3;
P(X>=2)=binomial(3, 2)*(1/2)^3;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(3, 3)*(1/2)^3;
binomial(3, 2)*(1/2)^3;
binomial(2, 2)*(1/2)^2;
binomial(2, 1)*(1/2)^2;
binomial(1,1)*(1/2)^1;
binomial(1, 0)*(1/2)^1;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(1, 1)*(1/2)^1+binomial(1, 0)*(1/2)^1;
binomial(2, 2)*(1/2)^2+binomial(2, 1)*(1/2)^2;
binomial(3, 3)*(1/2)^3+binomial(3, 2)*(1/2)^3;
(1*(1/2)^3)+(3*(1/2)^3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
makelist(binomial(n, n)*p^n, n, 0, 3);
makelist(binomial(n, n-1)*p^n, n, 0, 3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
apply("+", [makelist(binomial(n, n)*p^n, n, 0, 3), makelist(binomial(n, n-1)*p^n, n, 0, 3)]);
p:1/2$ k:10$
apply("+", [makelist(binomial(n, n)*p^n, n, 0, k), makelist(binomial(n, n-1)*p^n, n, 0, k)]);
apply("-", [makelist(binomial(n, n-1)*p^n, n, 0, k), makelist(binomial(n, n)*p^n, n, 0, k)]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
3*(1-p)*p^2, expand;
p^3+3*(1-p)*p^2, expand;
subst(p=1/2, p^3+3*(1-p)*p^2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(3, 2)*p^2*(1-p), expand;
binomial(3, 3)*p^3*(1-p)^0, expand;
binomial(3, 2)*p^2*(1-p), expand;
binomial(3, 3)*p^3*(1-p)^0+binomial(3, 2)*p^2*(1-p), expand;
subst(p=1/2, binomial(3, 3)*p^3*(1-p)^0+binomial(3, 2)*p^2*(1-p)), expand;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
sum(binomial(n, r)*p^r*(1-p)^(n-r), n, 0, 3), sumexpand, expand, ratexpand;
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 2, 3), sumexpand, expand, ratexpand;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(1-p)^3, expand;
(p-1)^3, expand;
-1/2^3;
-1/2^3+3/4;
-1/2^3+3/4-3/2;
-1/2^3+3/4-3/2+1;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
subst(p=1/2, (1-p)^3), expand;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kill(n, r, p)$
n:3$
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 0, 0), ratexpand;
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 1, 1), ratexpand;
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 2, 2), ratexpand;
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 3, 3), ratexpand;
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 0, 1), ratexpand;

sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 0, 2), ratexpand;
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 0, 3), ratexpand;

sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 1, 2), ratexpand;
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 2, 3), ratexpand;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
makelist(sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, k, n), k, 0, 3), expand, factor;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
subst([n=3, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 0, 2)), sumexpand;
subst([n=3, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 2, 3)), sumexpand;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 2, 3), sumexpand;
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 2, 3), expand;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
makelist(subst([n=3, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, k, k)), k, 0, 3);
makelist(subst([n=3, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 0, k)), k, 0, 3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
makelist(binomial(3, r)*p^r*(1-p)^(3-r), r, 0, 3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
makelist(subst([n=10, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, k, k)), k, 0, 10);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
makelist(subst([n=10, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 0, k)), k, 0, 10);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kill(r, k)$
n:3$ r:r$ p:1/2$
binomial(3, 2);
binomial(n, r)*(p^r)*(1-p)^(n-r);
kill(n)$
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 0, n);
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-1, n);
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 2, 3);
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 2, 3), expand;
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 2, 3), ratsimp, expand;
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 2, 3), ratsimp;
subst([n=3], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 3, 3)), ratsimp;
subst([n=3], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 2, 3)), ratsimp;
subst([n=3], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 1, 3)), ratsimp;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kill(n, p, r)$
subst([n=3, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 3, 3)), ratsimp;
subst([n=3, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 2, 3)), ratsimp;
subst([n=3, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 2, 2)), ratsimp;
subst([n=3, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 1, 2)), ratsimp;
subst([n=3, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 1, 1)), ratsimp;
subst([n=3, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 0, 1)), ratsimp;
subst([n=3, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 0, 0)), ratsimp;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
makelist(subst([n=3, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, m, k)), m, 0, 3);
makelist(subst([n=3], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 0, m)), m, 0, 3);
makelist(subst([n=3], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 0, m)), m, 0, 3), ratsimp;
makelist(subst([n=3], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, m, 3)), m, 0, 3), ratsimp;
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-1, n), ratsimp, expand;
subst(n=3, sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-1, n));
sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-1, n), ratsimp, expand;
subst(p=1/2, sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-1, n)), ratsimp, expand;
subst(p=1/6, sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-1, n)), ratsimp, expand;
subst(p=1/6, sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-2, n)), ratsimp, expand;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
subst([n=3, p=1/6], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-1, n)), ratsimp, expand;
1/6^3+(5*3/6^3);
(1/6)^3+3*(5/6)*(1/6)^2;
subst([p=1/6, q=1-1/6], p^3+3*q*p^2);
subst([n=3, p=1/6], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-2, n)), ratsimp, expand;
1-(5/6)^3;
1/(6^3)+((25*9)/(2*6^3))-((15*3)/(2*6^3));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(p+q)^3, expand;
(p+q)^3-q^3-3*p*q^2, expand;
subst([p=1/6, q=5/6], (p+q)^3);
subst([p=1/6, q=5/6], q^3+3*p*q^2);
subst([p=1/6, q=5/6], p^3+3*q*p^2);
subst([p=1/6, q=5/6], p^3+3*q*p^2+3*p*q^2);
1-subst([p=1/6, q=5/6], p^3+3*q*p^2+3*p*q^2);
subst([p=1/6, q=5/6], 1-(p^3+3*q*p^2+3*p*q^2));
subst([p=1/6, q=5/6], 3*q*p^2+3*p*q^2+q^3);
1-subst([p=1/6, q=5/6], 3*q*p^2+3*p*q^2+q^3);
subst([p=1/6, q=5/6], 1-(3*q*p^2+3*p*q^2+q^3));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
subst([p=1/2, q=1-1/2], p^3+3*q*p^2);
subst([p=1/2, q=1/2], p^3+3*q*p^2);
subst([p=1/2, q=1/2], p^3+3*q*p^2+3*p*q^2);
1-subst([p=1/2, q=1/2], p^3+3*q*p^2+3*p*q^2);
subst([p=1/2, q=1/2], 3*q*p^2+3*p*q^2+q^3);
1-subst([p=1/2, q=1/2], 3*q*p^2+3*p*q^2+q^3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(2, 0); binomial(2, 1); binomial(2, 2);
binomial(3,0); binomial(3, 1); binomial(3, 2); binomial(3, 3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(2,2)*binomial(2,1)*binomial(2,0);
binomial(2,2)+binomial(2,1)+binomial(2,0);
binomial(3,0)*binomial(3,1)*binomial(3,2)*binomial(3,3);
binomial(3,0)+binomial(3,1)+binomial(3,2)+binomial(3,3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(binomial(2,2)+binomial(2,1)+binomial(2,0))
/(binomial(3,0)+binomial(3,1)+binomial(3,2)+binomial(3,3));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(binomial(3,3))/(binomial(3,0)+binomial(3,1)+binomial(3,2)+binomial(3,3));
(binomial(3,3)+binomial(3,2))/(binomial(3,0)+binomial(3,1)+binomial(3,2)+binomial(3,3));
(binomial(3,3)+binomial(3,2)+binomial(3,1))/(binomial(3,0)+binomial(3,1)+binomial(3,2)+binomial(3,3));
(binomial(3,3)+binomial(3,2)+binomial(3,1)+binomial(3,0))
/(binomial(3,0)+binomial(3,1)+binomial(3,2)+binomial(3,3));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(2,1)*binomial(3,2)+binomial(2,1)*binomial(3,3);
(binomial(2,1)*binomial(3,2)+binomial(2,1)*binomial(3,3))
/(binomial(2,1)*binomial(3,3)
+binomial(2,1)*binomial(3,2)
+binomial(2,1)*binomial(3,1)
+binomial(2,1)*binomial(3,0));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
1/((binomial(3,3)*binomial(3,2))/(binomial(3,0)*binomial(3,1)*binomial(3,2)*binomial(3,3)));
(binomial(2,2)*binomial(2,0))/(binomial(2,2)*binomial(2,1)*binomial(2,0));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(3,3)/binomial(8, 1);
binomial(3, 2)/binomial(8, 1);
(binomial(3,3)+binomial(3,2))/binomial(8,1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(3,2)*binomial(2,2);
binomial(3,1)*binomial(2,2);
binomial(3,0)*binomial(2,2);

binomial(3,2)*binomial(2,1);
binomial(3,1)*binomial(2,1);
binomial(3,0)*binomial(2,1);

binomial(3,2)*binomial(2,0);
binomial(3,1)*binomial(2,0);
binomial(3,0)*binomial(2,0);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(binomial(2, 2))/binomial(8, 1);
(binomial(2, 2)+binomial(2, 1))/binomial(8, 1);
(binomial(2, 2)+binomial(2, 1)+binomial(2, 0))/binomial(8, 1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
subst(p=1/2, sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-1, n)), ratsimp, expand;
subst(p=1/2, sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-2, n)), ratsimp, expand;
subst(p=1/2, sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-3, n)), ratsimp, expand;
"";
"at least 3 Hs (HHH) in 3 throws";
subst([n=3, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n, n)), ratsimp, expand;
"at least two Hs (HH) in 3 throws";
subst([n=3, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-1, n)), ratsimp, expand;
"at least one H in 3 throws";
subst([n=3, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-2, n)), ratsimp, expand;
[HHH, HHT, HTH, HTT, THH, THT, TTH, TTT];
"at least no H in 3 throws";
subst([n=3, p=1/2], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-3, n)), ratsimp, expand;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"exactly 0 1 2 3 Hs in 3 throws cases.....";
subst([n=3, p=1/2, r=0], binomial(n, r)*(p^r)*(1-p)^(n-r));
subst([n=3, p=1/2, r=1], binomial(n, r)*(p^r)*(1-p)^(n-r));
subst([n=3, p=1/2, r=2], binomial(n, r)*(p^r)*(1-p)^(n-r));
subst([n=3, p=1/2, r=3], binomial(n, r)*(p^r)*(1-p)^(n-r));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
makelist(subst([n=3], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 0, m)), m, 0, 3);
makelist(subst([n=3], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 0, m)), m, 0, 3), expand;
makelist(subst([n=3], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, 0, m)), m, 0, 3), factor;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
makelist(subst([n=3], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, m, 3)), m, 0, 3);
makelist(subst([n=3], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, m, 3)), m, 0, 3), expand;
makelist(subst([n=3], sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, m, 3)), m, 0, 3), simpsum, expand;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
makelist(subst(n=k, sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-1, n)), k, 0, 10);
makelist(subst(n=k, sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-2, n)), k, 0, 10);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
transpose(matrix(makelist(makelist(subst(n=k, sum(binomial(n, r)*(p^r)*(1-p)^(n-r), r, n-h, n)), 
k, 0, 10), h, 0, 10)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
cdf_binomial(2, 3, 1/2);
pdf_binomial(2, 3, 1/2);
cdf_binomial(0,3,1/2)-pdf_binomial(0,3,1/2);
cdf_binomial(1,3,1/2)-pdf_binomial(1,3,1/2);
cdf_binomial(2,3,1/2)-pdf_binomial(2,3,1/2);
cdf_binomial(3,3,1/2)-pdf_binomial(3,3,1/2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
1-(cdf_binomial(0,3,1/2)-pdf_binomial(0,3,1/2));
1-(cdf_binomial(1,3,1/2)-pdf_binomial(1,3,1/2));
1-(cdf_binomial(2,3,1/2)-pdf_binomial(2,3,1/2));
1-(cdf_binomial(3,3,1/2)-pdf_binomial(3,3,1/2));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
transpose(matrix(makelist(makelist(cdf_binomial(m, k, 1/2)-pdf_binomial(m, k, 1/2), m, 1, 10), k, 1, 10)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(8,1)*(binomial(3,3)+binomial(3,2))/binomial(8,1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(3,3)+binomial(3,2);
(binomial(3,3)+binomial(3,2))/(binomial(3,3)+binomial(3,2)+binomial(3,1)+binomial(3,0));
(binomial(3,3)+binomial(3,2)+binomial(3,1)+binomial(3,0));
binomial(2,1)*(binomial(3,3)+binomial(3,2));
1/2*(binomial(2,1)*(binomial(3,3)+binomial(3,2)))
/(1/2*(binomial(2,1)*(binomial(3,3)+binomial(3,2)+binomial(3,1)+binomial(3,0))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(binomial(3,3)+binomial(3,2))/(binomial(2,1)*binomial(2,1)*binomial(2,1));
(binomial(3,3)+binomial(3,2))/binomial(2,1)^3;
(binomial(3,3)+binomial(3,2))/(binomial(3,3)+binomial(3,2)+binomial(3,1)+binomial(3,0));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"in 24 throws at least once 1/6 with one dice";
1-(5/6)^24, numer;
"in 24 throws at least once 1/6 with two die";
1-(35/36)^24, numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"in 24 throws at least once 1/6 with one dice in binomial notation";
binomial(24,0); "== once";
binomial(24, 24); "== once";
1-binomial(24,0)*(1/6)^0*(5/6)^24, numer;
1-binomial(24, 24)*(1/6)^0*(5/6)^24, numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
1-binomial(4,0)*(1/6)^0*(5/6)^4, numer;
binomial(4,0)*(1/6)^0*(5/6)^4, numer;
1-binomial(4,0)*(1/6)^0*(5/6)^4+binomial(4,0)*(1/6)^0*(5/6)^4, numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(4,0)*(1/6)^4*(5/6)^0, numer;
1-binomial(4,0)*(1/6)^4*(5/6)^0, numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
1-binomial(24,1)*(1/6)^1*(5/6)^23, numer;
1-binomial(24, 23)*(1/6)^1*(5/6)^23, numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(24, 24)*(1/6)^0*(5/6)^24, numer;
binomial(24, 23)*(1/6)^1*(5/6)^23, numer;
1-binomial(24, 24)*(1/6)^0*(5/6)^24, numer;
1-binomial(24, 23)*(1/6)^1*(5/6)^23, numer;
binomial(24, 24)*(1/36)^0*(35/36)^24, numer;
binomial(24, 23)*(1/36)^1*(35/36)^23, numer;
1-binomial(24, 24)*(1/36)^0*(35/36)^24, numer;
1-binomial(24, 23)*(1/36)^1*(35/36)^23, numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
1-(5/6)^24, numer;
(1/6)^24, numer;
1-(5/6)^24+(1/6)^24, numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
1-binomial(24, 24)*(1/6)^0*(5/6)^24, numer;
1-(binomial(24, 24)*(1/6)^0*(5/6)^24), numer;
1-(binomial(24, 1)*(1/6)^1*(5/6)^23), numer;
1-binomial(24, 23)*(1/6)^1*(5/6)^23, numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(24, 24)*(1/6)^24*(5/6)^0, numer;
binomial(24, 23)*(1/6)^23*(5/6)^1, numer;
1-binomial(24,0)*(1/6)^0*(5/6)^24, numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(7, 4)*(1/2)^4*(1/2)^3;
binomial(4,2)*(1/2)^2*(1/2)^2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(5, 4)/binomial(8,4);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
1-(1/6)^24, numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"Arrangements, Permutations!";
"In how many ways can the letters of the word FLUFF be arranged?";
5!/(3!*1!*1!);
5!/3!;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"In how many ways can the letter of the word ROTOR be arranged when letting the T in the middle unchanged?";
(5-1)!/(2!*2!);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"In how many ways can the letters of the word REDIVIDER be arranged when it has to remain still a palindrome?";
(9-5)!;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"In how many ways can the letters of the word SINGULAR be arranged ?";
8!;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"In how many ways can the letters of the word DOUBLED be arranged ?";
7!/2!;"total/doubles";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"In how many ways can the letters of the word REPETITIOUS be arranged ?";
11!/(2!*2!*2!);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"In how many ways can the letters of the word KRAKATOA be arranded ?";
8!/(2!*3!);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"In how many ways can the letters of the word MISSISSIPPI be arranged ?";
11!/(4!*4!*2!);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"In how many ways can the letters of the phrase MINNEAPOLIS MINNESOTA be arranged ?";
20!/(2!*3!*4!*2!*2!*2!*2!); "5.2797*10^14";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"In how many ways can 3 copies of Calc book 4 copies of LA book and 5 copies of DP book be arranged ";
"in a bookshelf?";
(3+4+5)!/(3!*4!*5!);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"How many numbers can be made each using all the digits 1, 2, 3, 4, 4, 5, 5, 5 ?";
8!/(2!*3!); "2 fours three fives in a total of 8!";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"How many numbers can be made each using all the digits 1, 2, 2, 3, 3, 3, 0 ?";
7!/(2!*3!);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"Five persons A,B,C,D,E are going to speak at a meeting, in how many orders can they take their turns ";
"if B must speak after A?";
5!/(5-3)!; 
"two places are fixed, there remains 3 places out of 5 for the ordering";
"A B (C D E)-> A (C D E) B -> A (C D) B, (E).....";
"and B (CDE) A is not acceptable!, cause reverse order!";
"so halve of the set gets dropped out!";
(5*4*3*2*1)/(2*1); 
5*4*3;
"note there are 2 (5-3) fixed positions and 3 (5-2) positions remain";
"for variation after dropping the fixed (wrt the whole) positions";
"2 of the five positions drops out of the total numer of orderings (5!) of the whole set!";
"the 2 itself are not fixed ofc, so it's not some 2 but each 2 out of the possible orderings of the 5";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"Five persons A,B,C,D,E are going to speak at a meeting, in how many orders can they take their turns ";
"if B must speak immediately after A?";
4!;
(5-1)!;
5!/5;
"now there remains only 4 places out of 5 for the ordering, why ? cause A and B are grouped!";
" (AB) C D E == C D E F, if (AB)=F then F has 4 positions to occupy and there are 4! ways for it";
"for each of the positions it can occupy (fixed position) there are 3! positions for rest to vary";
"so 4*3!=4*3*2*1=24 ways";
"say another way one of the five positions drops out!";
"the 5 below is not to be interpreted as the fifth position!, but rather one of the 5";
"and we can't just say 1 fixed place drops out because that is ambigous as in 5*4*3*2*1/1 rather than:";
(5*4*3*2*1)/5;
"it's not enumeration (qualitative) just quantification!";
4*3*2*1;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"In how many ways can the letters of the word MUHAMMADAN be arranged without letting three letters";
"that are alike come together";
10!/(3!*3!); "3 As 3 Ms";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(10!/(3!*3!))-((2!*8!)/3!)+6!;
"official solution, if you don't allow one of the 3 groups AAA or MMM to be there, then you have";
"at least a 2 group MM or AA which arranges with the rest, ok so far makes sense, and the division by 3!";
"saiz exclude the 3 group cases from that too because the 2 group has still one of them in them like in";
"AAMMM.....";
"the 6! is the grouping of the 2 groups of 3 AAA and MMM to 1 group, so it treats them as a whole group";
"but why is it added back in ? and the former case is excluded, shouldn't have that been vice versa ?";
"inclusion-exclusion are total arrangements - at least one group of 3 together(with 7 others)";
"+ two groups of 3 together (with 4 others) ";
"notice that none of the 7 others or 4 others mentioned makes it as numbers into the calculation.....";
"the at least one group 3 together, the AAA or MMM case, is so to say subtracted";
"(division == multi subtractions) from the case when we don't allow the 3 group to stay together (2+8)";
"there are two cases of the 3 group together case like in AAA MMM ......and MMM AAA....,";
"so the 2 or 2! derives from that";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(10!/(3!*3!))-2!*(8!/3!)+6!;
(10!/(3!*3!))-(2!*(8!/3!)-6!);
"better way to write it maybe......";
(10!/(3!*3!))+(6!-2!*(8!/3!));
"total + (cases excluded - cases included), aha!";
"total - cases included + cases excluded, aha!, makes it clear why it was added back in!";
"logically they are excluded!, cause excluded already means negative (in a sense)!";
"make sure which are the group which gets excluded, maybe visually....";
"it is the group MMMAAA...... and AAAMMM...... which we don't want!";
"those are 2 groups when we treat them each as 3 but 1 group when treated as a 6";
"so the 6! case is clearly to be excluded";
", but notice into the inclusion-exclusion formula it makes it as a + !";
10!/(3!*3!)-8!/3!-8!/3!;
10!/(3!*3!)-6!;
"10!/(3!*3!)-6!+(-8!/3!-8!/3!), wrong!, not -6! (6! is already the exclusion group!)";
10!/(3!*3!)+6!;
10!/(3!*3!)+6!-8!/3!-8!/3!;
10!/(3!*3!)+6!-(8!/3!+8!/3!);
10!/(3!*3!)+6!-2*(8!/3!);
"the MMAAA..... or the AAMMM...... etc. cases which are 8fold for each is an inclusion group, cause";
"we include the MM part (allowed) and don't care about the AAA....part or include the AA part and ";
"don't care about the MMM......part";
"however the question is vague about the part '3 letters which are alike don't come together....'";
"which maybe interpreted as all 3 letters which are alike don't come together....";
"but the missing wording of 'all' is the hint at this point to not conclude that way.....";
"tho my mind is always short-circuiting and i discover myself assuming 'all' was meant....";
", i.e. we only consider 1 group of 3's each, which aren't allowed to come together.....";
"total+exclusion-inclusion"; ¦;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(10!/(3!*3!))-5*(7!/2!)-5!;
(10!/(3!*3!))-(5*(7!/2!)+5!);
"the same for the other half!, cases inversed!";
(10!/(3!*3!))-(5*(7!/3!))-8!;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(10!/(3!*3!))-((2!*8!)/3!)+6!;
(10!/(3!*3!))-(1/6*(2!*8!)-6!);
(10!/(3!*3!))-(2/6*8!-6!);
(10!/(3!*3!))-(1/3*8!-6!);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
8!/3+6!;
8!/3-6!;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
720/3; 3*2*5!; 1/3*(8!-6!);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
10!/(3!*3!);
2!*8!;
(2!*8!)/3!;
(((2!*8!)/3!)+6!);
(10!/(3!*3!))-(((2!*8!)/3!)+6!);
(10!/(3!*3!))-(((2!*8!)/3!)-6!);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
10!/(3!*3!)-
2*((6!*2!+5!*3!+4!*4!+3!*5!+2!*6!)+(1!+2!+3!+4!+5!+6!))-(1!+2!+3!+4!+5!+6!)
-2*(1!+2!+3!+4!+5!)-(1!+2!);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
10!/(3!*3!)-
2*((6!*2!+5!*3!+4!*4!+3!*5!+2!*6!))-(5!*3!+4!*4!+3!*5!)-6*(4!*2!+3!*3!+2!*4!)-3*(3!*3!)-3*(2!*2!);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
10!/(3!*3!)-
2*((6!*2!+5!*3!+4!*4!+3!*5!+2!*6!))-(5!*3!+4!*4!+3!*5!)-6*(4!*2!+3!*3!+2!*4!)-5*(3!*2!+2!*3!);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
10!/(3!*3!)-7!-7!-6!-6!-6!-5!-5!-5!-5!;
10!/(3!*3!)-2*7!-3*6!-4*5!;
10!/(3!*3!)-(2*7!+3*6!+4*5!);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"My solution above, i can only notice some stuff beforehand, before making any conclusions as how to";
"interprete it in an intuitive way, first of notice 7+2=9, 3+6=9, 4+5=9 !";
"if we don't allow one of the 3 groups AAA or MMM then we allow at least 2 of them like in AA and MM";
"and each cases reduce to as if we had 9 elems just in the sequence not 10 anymore.......";
"further notice 2+3+4=9, 5+6+7=18";
"but MM and AA are two cases just where does the 3rd 9 come from ? if we were to interpret it like that!";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
10!/(3!*3!)-(2*7*6!+3*6*5!+4*5!);
10!/(3!*3!)-(2*7*6*5!+3*6*5!+4*5!);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
10!/(3!*3!)-(2*6*7+3*6+4)*5!;
10!/(3!*3!)-106*5!;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"At a restaurant 6 people order roast beef, 3 order turkey, 2 order pork chops and 1 orders flounder. There are 12 servings";
"how many ways can the servings be distributed that everyone gets the correct item ?";
1!*2!*3!*6!;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"[1, 2, 3, 6], [11, 10, 9, 6]; [rights], [wrongs]";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"How many ways can the servings be distributed so that no one gets the correct item?";
"6!*6!, or";
"12!/((6*3*2*1)*4!)-(4*(6!*3!*2!*1!)+4!*(6*3*2*1)+4!*(6+3+2+1)+4*(6*3*2*1)+(3*(4*(6+3+2+1))));";
"12!/((6*3*2*1)*4!);";
"3*48+144+288+864+34560;";
"554400-36000;";
12!/((6*3*2*1)*4!)-(4*(6!*3!*2!*1!)+4!*(6*3*2*1)+4!*(6+3+2+1)+4*(6*3*2*1)+4*(6+3+2+1)+(2*(4*(6+3+2+1))));
12!/((6*3*2*1)*4!)-(4*(6!*3!*2!*1!)+4!*(6*3*2*1)+4!*(6+3+2+1)+4*(6*3*2*1)+(3*(4*(6+3+2+1))));
12!/((6*3*2*1)*4!)-(4*(6!*3!*2!*1!)+4!*(6*3*2*1)+4!*(6+3+2+1)+(2*(4*(6*3*2*1))));
12!/((6*3*2*1)*4!)-(4*(6!*3!*2!*1!)+4!*(6*3*2*1)+(2*4!*(6+3+2+1)));
12!/((6*3*2*1)*4!)-(4*(6!*3!*2!*1!)+4!*(6*3*2*1)+(2*4!*(6+3+2+1)));
12!/((6*3*2*1)*4!)-(4*(6!*3!*2!*1!)+(5*4!*(6+3+2+1)));
12!/((6*3*2*1)*4!)-(4*(6!*3!*2!*1!)+5/3*4!*(6*3*2*1));
12!/((6*3*2*1)*4!)-(4*(6!*3!*2!*1!)+5/3*4!*(6*3*2*1));
12!/((6*3*2*1)*4!)-(125/3*4!*(6*3*2*1));
12!/((6*3*2*1)*4!)-(25/24*4*(6!*3!*2!*1!));
12!/((6*3*2*1)*4!)-(125*4!*(6+3+2+1));
12!/((6*3*2*1)*4!)-(250*4*(6*3*2*1));
12!/((6*3*2*1)*4!)-(750*4*(6+3+2+1));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
((6*3*2*1)*4!);
binomial(9, 3)*binomial(15, 3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(12!/(12-1)!*(binomial(11, 2)*binomial(9, 3)*binomial(6, 6)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
55440*8640;
12!;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
1!*2!*3!*6!;
((12-11)!*(12-10)!*(12-9)!*(12-6)!);
12!/((12-11)!*(12-10)!*(12-9)!*(12-6)!);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
4*(6!*3!*2!*1!);
4!*(6*3*2*1);
4!*(6+3+2+1);
4*(6*3*2*1);
4*(6+3+2+1);
(3*(4*(6+3+2+1)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(9, 2);
binomial(8, 2);
binomial(4, 1);
binomial(12, 1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(9,2)+binomial(4,1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(12+3-1, 3-1);
binomial(12-3+1, 3);
36000/binomial(12-3+1, 3);
binomial(12, 2);
binomial(10,  3);
binomial(12-3+1, 3);
binomial(12-4+1, 4);
binomial(12+3-1, 3);
binomial(12+4-1, 4);
binomial(12-2-1, 2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
12!/(12-6)!;
12!/(12-5)!;
12!/(12-4)!;
12!/(12-3)!;
12!/(12-2)!;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(12+4-1,4);
binomial(12+4-1, 4-1);
binomial(12+3-1, 4);
binomial(12+3-1, 3);
binomial(12+4, 4);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
12!/(6!*3!*2!*1!);
12!/(6!*3!*2!*1!)*10;
12!/((6!*3!*2!*1!)/10);
(12!/((6+3+2+1)*4!))/3;
12!/((6+3+2+1)*24*3);
12!/((6+3+2+1)*72);
12!/((6*3*2*1)*4!);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(11, 3)*220;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(12+4-1, 12);
binomial(12+3-1, 12);
binomial(12+2-1, 12);
binomial(12+1-1, 12);
13*91*455;
binomial(12, 4)*binomial(8, 4)*binomial(4, 4)-(binomial(9,4)-binomial(9,2));
binomial(12,3)*binomial(11,3);
binomial(10,1)*binomial(30, 1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(12+3+1, 3+1);
binomial(12+4+1, 4+1);
binomial(12+5+1, 5+1);
binomial(12+6+1, 6+1);
binomial(12+7+1, 7+1);
binomial(12+8+1, 8+1);
binomial(12+9+1, 9+1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
554400-36000;
12!/((1!*2!*3!*6!));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
36000/1440;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
25*8640;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(4*8640)/40+36;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
900*40;
300*120;
300*binomial(10, 3);
1000*binomial(9, 2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
binomial(12,1)*binomial(9,2)+binomial(9,2)*binomial(8,2);
binomial(9,2)*(binomial(12,1)+binomial(8,2))+binomial(4,1)*(1!*2!*3!*6!);
binomial(12,1)*binomial(9,2)+binomial(9,2)*binomial(8,2)+(binomial(4,1)*8640);
36*(6+3+2+1)+28*(6*3*2*1)+4*8640;
36*(12+28)+4*8640;
36*40+4*8640;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
36000/48;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
34560/1440;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
36000/34560;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(25/24)*34560;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(40+5/3)*864;
(15*5/3)*1440;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
40+5/3;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
5/3*864;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(864+2*288)/2;
288*3;
288*5;
864*5/3;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
12!/((6*3*2*1)*4!);
3*48+144+288+864+34560;
554400-36000;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
"A: roast beef, B: turkey, C: pork chops, D: flounder";
"so there are 4 categories of served stuff";
"AAAAAA BBB CC D";
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
