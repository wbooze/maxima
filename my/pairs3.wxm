/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 14.09.0 ] */

/* [wxMaxima: input   start ] */
ratprint:false$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
seq(start,stop,[stepping]) := block(
[ n, y:[], ratprint:false, 
stepping: (if (not(emptyp(stepping))) then 
                    rat(first(stepping)) else rat(1.0)),
shift: (if (length(stepping)>1) then
                rat(second(stepping)) else rat(0.0)) ],

            (n:(float(stop-start)/float(stepping))),
            (if (start < stop)
            then
            (y:flatten(append([y], 
                                        makelist(float(start+shift+(stepping*(i-start))), 
                                        i, start, n+start))))
            else
            (y:flatten(append([y], 
                                        makelist(-(float(stop-shift-(stepping*(i-stop)))), 
                                        i, -(n+stop), stop)))))
            (if (n>1.0)
                then return(y)
                else return([])))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pairs(items):=block([result],
result:
if (emptyp(items)) then [] else
if (listp(items)) then 
    if(emptyp(rest(items))) then  [] else
    cons(cons(first(items),  [second(items)]), 
                    pairs(rest(rest(items))))
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
intervals(items):=block([result],
  result: if (emptyp(items)) then [] else
          if(listp(items)) then
           if(emptyp(rest(items))) then [] else
               cons(cons(first(items),  [second(items)]),
                       intervals(rest(items))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
evenp(10); evenp(100);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kill(all)$
intervals(items, [granul]):=
block(
[ start:first(items), stop:last(items), ans:[], 
granul:(if (not(emptyp(granul))) then first(granul) else 1) ], 
ratprint:false, 
if (emptyp(items)) then [] 
else
if(listp(items)) then
    if(emptyp(rest(items))) then [] 
    else 
   while(float(rat(start))<float(rat(stop))) do
    (ans:delete([], 
            delete([float(rat(stop)), float(rat(stop+granul))], 
            append(ans, [cons(float(rat(start)),  [float(rat(start+granul))])]))), 
     start:float(rat(start+granul))), 
    return(ans))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
intervals([0, 5]);
intervals([0, 5], 1/2);
intervals([0, 1], 0.1);
intervals([0, 1], 0.01);
intervals([0, 1], 0.001);
display(intervals([0, 1], 1/10000)), numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
lsplit(fn, lst):=block([ acc:[], m:[], src:lst], load(basic),
while (not(emptyp(src))) do (
if(fn(first(src))) then return() else
push(pop(src), acc)
), push(src, m), return([reverse(acc), first(m)]));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
delete([], lsplit(lambda([n], numberp(n)), intervals(makelist(n, n, -3, 3))));
delete([], lsplit(lambda([n], listp(n)), intervals([-3, 3])));
delete([], lsplit(lambda([n], numberp(n)), intervals([-3, 3])));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
continuous_at(expr, var, at):=block(
if (is(equal(limit(expr, var, at, plus), 
                   limit(expr, var, at, minus)))) 
then at else false)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
continuous_at(cot(x), x, %pi);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
continuous_over(expr, var, range, [granul]):=
block(
[ min:lmin(range), max:lmax(range),
granul:(if not(emptyp(granul)) then first(granul) else rat(1.0)) ], 
ratprint:false, fpprec:12, fpprintprec:12,

intervals(items, [granul]):=
block(
[ start:first(items), stop:last(items), ans:[], 
granul:(if not(emptyp(granul)) then first(granul) else 1) ],

if (emptyp(items)) then [] 
else
if(listp(items)) then
    if(emptyp(rest(items))) then [] 
    else
    while(start<stop) do
    (ans:append(ans, [cons(start,  [start+granul])]), start:start+granul), 
    return(ans)), 

continuous_at(expr, var, at):=block(
if (is(equal(limit(expr, var, at, plus), limit(expr,var, at, minus)))) 
then at else false), 

multipi(n, [prec]):=
block([m:n, prec:if(not(emptyp(prec))) then first(prec) else 1], fpprec:32, fpprintprec:32, 
ans:rat(float(((%pi-mod(%pi, prec))/m))), 
return(ans)),

lsplit(crit, lst):=
block(
[ acc:[], m:[], src:lst, fn:lambda([n], n=crit)], 
load(basic),
while (not(emptyp(src))) do (
if(fn(first(src))) then return() else
push(pop(src), acc)
), push(src, m), 
return(map(lambda([n], delete(false, n)),
[reverse(acc), first(m)]))),

seq:intervals([min, max], granul),
ans:map(lambda([n], continuous_at(expr, var, first(n))), seq),
req:block(if(member(false, ans)) then lsplit(false, ans) 
else lsplit(n, ans)),
return(req))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
 continuous_over(cot(x), x, [-%pi, %pi], 0.1), numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for i in intervals([-%pi, %pi], 0.1) do
print(float(multipi(i, 10^(-16))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
float(multipi([[3.1, 3.14, 3.141],[3.1415, 3.14159265358]], 10^-12));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kill(m)$
delete(false, map(lambda([n], if(is(float(multipi(first(n), 0.1)) <= 1 and 
                                     float(multipi(second(n), 0.1)) >= 0.98)) then n else false), 
intervals([-%pi, %pi], 0.1))), numer;
m;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for i in intervals([-%pi, %pi], 0.01) do 
k:append(k, map(lambda([n], 
if(is(
float(multipi(n, 10^-16)) <= 1 and 
float(multipi(n, 10^-16)) >= 0.98)) then n else false), i)), numer;
delete(false, k);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
float(multipi(%pi, 0.1));
is(float(multipi(%pi, 0.1))<1 and float(multipi(%pi, 0.01)) > 0.98);
float(multipi(3.15840734641021, 0.1));
is(float(multipi(2.95840734641021, 0.1)) < 1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
is(1<2 and 2<3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
intervals([0, 5]);
map(lmin, intervals([0, 5]));
map(lmax, intervals([0, 5]));
lsplit(false, flatten(map(lambda([n], 
continuous_over(cot(x), x, [first(n), second(n)])), intervals([-5, 5]))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
map(lambda([n], continuous_at(cot(x), x, first(n))),
map(first, map(intervals, intervals(makelist(n, n, -5, 5))))), numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
limit(cot(x), x, 0); limit(cot(x), x, 0, plus); limit(cot(x), x, 0, minus);
is(equal(limit(cot(x), x, 0), infinity));
is(equal(limit(cot(x), x, 0), inf));
is(equal(limit(cot(x), x, 0), minf));
is(equal(limit(cot(x), x, 0), -infinity));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
intervals(makelist(n, n, 0, 5));
pairs(makelist(n, n, 0, 5));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pairs(intervals(makelist(n, n, 0, 5)));
intervals(makelist(n, n, 0, 5));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pairs(pairs(makelist(n, n, 0, 5)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
h:[]$
for i:1 thru 4 do (h:append(h, [intervals(makelist(n, n, 1, i, 1/i))]))$
h, numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
%pi, numer; %pi-mod(%pi, 1/1000), numer; declare(n, integer);
makelist(n*%pi-mod(n*%pi, 1/1000), n, 1, 10), numer;
makelist((%pi-mod(%pi/n, 10^(-n))/n), n, 1*%pi, 10*%pi), numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
integerp(3.0); integerp(rat(3.0));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
load(functs);
rational(0.5);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
setify(makelist(1/n, n, 1, 3));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
makeset(1/n, [n], {[1], [2]});
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratepsilon;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kill(all)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
integerp(1/rat(0.01));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
integerp(floor(1/0.001));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
mod(9.41/100, 1/100);
mod(9.42/100, 1/100);
mod(9.42/100, 1/100)-mod(9.41/100, 1/100);
mod(9.424/1000, 1/1000);
mod(9.423/1000, 1/1000);
mod(9.424, 1)-mod(9.423, 1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
one conversion operation halves the precision, roughly!
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
fpprec;
9.424-9.423;
9.424-9.423, bfloat;
rat(9.424-9.423), bfloat;
bfloat(rat(9.424-9.423)), fpprec:22;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
float(%pi-(%pi-mod(3.13/100, 1/100)));
float(%pi/(%pi/mod(3.13/100, 1/100)));
float(%pi-(%pi-mod(3.14/100, 1/100)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
float(%pi-(%pi-mod(3/1, 1/1)));
float(%pi-(%pi-mod(3.1/10, 1/10)));
float(%pi-(%pi-mod(3.13/100, 1/100)));
float(%pi-(%pi-mod(3.14/100, 1/100)));
float(%pi-(%pi-mod(3.141/1000, 1/1000)));
float(%pi-(%pi-mod(3.1415/10000, 1/10000)));
float(%pi-(%pi-mod(9.4/10, 1/10)));
float(%pi-(%pi-mod(9.42/100, 1/100)));
float(%pi-(%pi-mod(9.41/100, 1/100)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kill(multipi)$
multipi(n, [fprec]):=
block([ m:n, 
prec:(if(not(emptyp(fprec))) then first(fprec) else 1) ],
ratprint:false, bftorat:false, fpprec: 100, 
ans:(float(%pi)*float(m))/((float(m)*float(%pi))-mod(float(m)*float(%pi), 10^(-prec))), 
return(ans))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
debugmode(false);
%pi, numer; 2*%pi, numer; 3*%pi, numer;
multipi(3, 1), numer;
multipi(3.1, 1), numer;
multipi(3.14, 2);
multipi(3.141, 3);
multipi(3.1415, 4);
multipi(3.14159, 5);
multipi(3.141592, 6);
multipi(3.1415926, 7);
multipi(3.14159265, 8);
multipi(3.141592653, 9);
multipi(3.1415926535, 10);
multipi(3.14159265358, 11);
multipi(3.141592653589, 12);
multipi(6.2, 1);
multipi(6.28, 2);
multipi(6.283, 3);
multipi(6.2831, 4);
multipi(6.28318, 5);
multipi(6.283185, 6);
multipi(9.4, 1);
multipi(9.41, 2);
multipi(9.42, 2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
mod(9.41, 0.01);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
9.42^0.01-1; 1-(0.01^9.42);
9.43^0.01-1; 1-(0.01^9.43);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
9.424777/%pi-mod(9.424777/%pi, 0.000001), numer;
3*%pi, numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(9.42/%pi)-mod(9.42/%pi, 0.01), numer;
(9.42*%pi)/((9.42*%pi)-mod(9.42*%pi, 0.01)), numer;

(9.42/%pi)-mod(9.42/%pi/(%pi-9.42^0.01), 0.01), numer;
(9.42/%pi)-mod(9.42/%pi*(9.42^0.01), 0.02), numer;

(9.43/%pi)-mod(9.43/%pi*(1-0.01^9.43), 0.01), numer;
(9.43/%pi)-mod(9.43/%pi*(1-0.02^9.43), 0.02), numer;
(9.41/%pi)-mod(9.41/%pi/0.0001^2, 0.0001), numer;
(9.43/%pi)-mod(9.43/%pi/0.01, 0.01^2), numer;
(9.43/%pi)-mod(9.43/%pi/0.02, 0.02^2), numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kill(multipi)$
multipi(n, prec):=
block([ m:n, fprec:prec  ], 
ratprint:false, bftorat:false, fpprec:fprec+1, 
ans:bfloat(m/%pi)-mod(m/bfloat(%pi), 10^(-fprec)), 
return(ans))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pidigits(prec):=
block([fpprec:prec+1], 
ratprint:false, bftorat:true, ratepsilon:2.0e-1, float2bf:true, 
ans:bfloat((%pi-mod(%pi, 10^(-prec)))), 
return(ans))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
bfpidigits(prec):=
block([fpprec:prec], 
ratprint:false, bftorat:false, 
ans:sum((2*n!)/(2*n+1)!!, n, 0, 10^3), bfloat, fpprec:fpprec, 
bfloat(ans))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
%pi, bfloat, fpprec:100;
pidigits(100);
bfpidigits(100);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
multipi(9.42, 5);
mod(2.998b0, 1/10);
mod(2.998b0, 1/100);
mod(2.9984b0, 1/1000);
makelist(multipi(9.42, a), a, 1, 10);

mod(multipi(9.42, 5), 1/1000);
mod(multipi(9.42, 6), 1/1000);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
mod(1234, 10000)/10000, numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
mod(1234, 100)/10000, numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
fpprec:8; bftorat;
rat(0.1234);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
1/10, numer; 1/20, numer; 1/30, numer; 1/100, numer; 1/9, numer;
mod(100, 10), numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratio(num):=block([n], ratprint:false, 
for n:1 thru fpprec do (a:10^n/ratdenom(num), if(integerp(a)) then return(a)))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kill(lastdigits)$
lastdigits(fnum, lastn):=
block([m:rat(fnum), n:lastn, ans], 
/* it doesn't help when lastn is bigger than the total digits in fnum
 it returns the whole digits in fnum anyway without erroring! 
and fnum=%pi stuff works only upto 8 digits cause num(rat(fnum)) has so
much only! */
ratprint:false, 
ratio(num):=block([n], ratprint:false, 
for n:1 thru fpprec do (a:10^n/ratdenom(num), if(integerp(a)) then return(a))), 

ratepsilon:2.0e-16, bftorat:false,  
ans:mod(ratio(fnum)*num(m), (10^n))/(ratio(fnum)*denom(m)), 
return(float(ans)))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
lastdigits(0.1234, 4), numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
display(gcd(12345, 100000)= ratio(0.12345))$
display(gcd(1234, 10000)= ratio(0.1234))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratio(0.1); ratio(0.12); ratio(0.123); ratio(0.1234); ratio(0.12345);
makelist(lastdigits(0.12345, n), n, 5, 1, -1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
cartesian_product(setify([0, 1]));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
cartesian_product(setify([0, 1]), setify([0, 2]));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
list:[[0, 1], [0, 2], [0, 3]];
map(setify, list);
maplist(setify, list);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kill(m)$
block(m:[], for i in map(setify, list) do 
(m:append(m, ['x[first(rest(i))]=x[first(rest(i))]])), return(m));
map(rhs, m);
i:1$ j:i+1$ k:j+1$
cartesian_product(x[i], x[j], x[k]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
list;
buildq([a:setify(first(list)), b:setify(last(list))], 
cartesian_product(a, b));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
cartesian(list):=
block(
[ ans:buildq([a:setify(first(list)), b:setify(last(list)) ], 
cartesian_product(a, b))], 
ev(ans));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
cartesian([[0, 1], [0, 1]]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
lastdigits(fnum, lastn, [fprec]):=
block([ans, n:lastn, bfnum, m], 
/* with bfloats the precision is only 16 digits after the comma!
or is it ? not it is not even constant! */
fpprec:if(not(emptyp(fprec))) then first(fprec) else 2, 
bftorat:true, ratepsilon:1b-40, m:bfloat(fnum), 
ans:(mod(m, 1/10^(n))), 
return(bfloat(ans)))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
%pi, numer; rat(%pi), numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
bfloat(%pi), fpprec:44;
mod(bfloat(%pi), 1/1000), fpprec:44; "40 precision digits+4 non-precision-digits (1 for before the comma)";
lastdigits(%pi, 10, 20), fpprec:20; "10 non-precision digits + 10 precision digits";
lastdigits(%pi, 14, 40), fpprec:40; "14 non-precision digits + 26 precision digits";
lastdigits(%pi, 3, 44), fpprec:44; "means last 40 digits!";
lastdigits(1.1234, 0, 5);
lastdigits(1.1234, 1, 4);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
rat(1.123456789);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
fpprec:40; ratepsilon:1.0b-40;
num(rat(0.1234)); denom(rat(0.1234)); rat(0.1234);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
rationalize(0.1); rationalize(1b-2); num(rationalize(1b-2)); rat(1b-2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
rat(0.22);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kill(i)$
ratsimp;
simp:true, ratsimp:false, ratsimpexpons:false;
0.1234;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
3*%pi, numer;
multipi(limit((9+x), x, 0.43), 5);
makelist(multipi(9.41, a), a, 0, 10);
round((sum(multipi(9.424777, a), a, 0, 10)/10+
sum(multipi(9.424777, a), a, 0, 10)/10)/2);
length(makelist(multipi(9.424777, a), a, 0, 10));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(3+2.99999+2.999999)/3;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
multipi(3, 1), numer;
multipi(3.1, 0.1), numer;
multipi(3.14, 0.01);
multipi(3.141, 1/1000);
multipi(3.1415, 1/10000);
multipi(3.14159, 1/100000);
multipi(3.1415926, 1/10000000);
multipi(3.14159265, 1/100000000);
multipi(3.141592653, 1/1000000000);
multipi(3.1415926535, 1/10000000000);
multipi(3.14159265358, 1/100000000000);
multipi(3.141592653589, 1/1000000000000);
multipi(6.2, 0.1);
multipi(9, 1);
multipi(9.4, 0.1);
multipi(9.42, 0.01);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
makelist(limit(multipi(2*%pi, 1/n), n, m), m, 1990, 2000), bfloat, fpprec:20;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
%pi-mod(%pi, 1/1000000000000000000), bfloat;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
%pi, bfloat, fpprec:1000;
sum((2*n!)/(2*n+1)!!, n, 0, 1000), bfloat, fpprec:1000, fpprintprec:0;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
4*sum((-1)^(n)/(2*n+1), n, 0, 1000), bfloat, bftorat:true, fpprec:20;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
sum(8/((4*n+1)*(4*n+3)), n, 0, 1000), bfloat, fpprec:20;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
fpprec; fpprintprec:16;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
dense:intervals([0, 1], 0.0001);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
makelist(i);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
block([m:[], i],
for i:0 thru 1 step 1/10000 do 
           (m:append(m, makelist(float(i)))), 
return(listify(setify(m))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
primes(z):=block([k:z, y:1], 
    (y:listify(setify(append(makelist(if(primep(k)) then k else 1, k, 1, k), [y])))),
    return(y))$
primes_between(m,z):=block([k:z, y:1, l:m], 
    (y:listify(setify(append(makelist(if(primep(k)) then k else 1, k, l, k), [y])))),
    return(rest(y)))$
howmany_primes_between(m,z):=block([k:z, y:1, l:m], 
    (y:listify(setify(append(makelist(if(primep(k)) then k else 1, k, l, k), [y])))),
    return(length(rest(y))))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
primes(1100);
primes_between(1000, 1100);
howmany_primes_between(1000, 1100);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
??fpprintprec;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratprint:false$
for i:0 thru %pi step 0.001 do 
block(n:i-mod(i, rat(10^-3)), fpprec:32, fpprintprec:32,
print(continuous_at(cot(x), x, n)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
continuous_at(cot(x), x, %pi); continuous_at(cot(x), x, 1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
lsplit(false, intervals([0, 1, 2, false, 3, 4, 5]));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
lsplit(crit, lst):=
block(
[ acc:[], m:[], src:lst, fn:lambda([n], n=crit)], 
load(basic),
while (not(emptyp(src))) do (
if(fn(first(src))) then return() else
push(pop(src), acc)
), push(src, m), 
return(map(lambda([n], delete(false, n)),
[reverse(acc), first(m)])));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
lsplit(false, [1, 2, 3, false, 3, 5, 6]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
intervals(items, [granul]):=
block(
[ start:first(items), stop:last(items), ans:[], 
granul:(if not(emptyp(granul)) then first(granul) else 1) ], 
ratprint:false, 
if (emptyp(items)) then [] 
else
if(listp(items)) then
    if(emptyp(rest(items))) then [] 
    else 
    while(float(rat(start))<float(rat(stop))) do
    (ans:delete([], 
            delete([float(rat(stop)), float(rat(stop+granul))], 
            if(float(rat(start+granul))>float(rat(stop)))
            then return() else
            append(ans, [cons(float(rat(start)),  [float(rat(start+granul))])]))), 
     start:float(rat(start+granul))), 
    return(ans))$

intervals([0, 6], 1);
intervals([0, 2*%pi], 1);
intervals([0, 2*%pi], %pi);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratio(num):=block([k, a], ratprint:false, 
for k:1 thru fpprec do (a:10^k/ratdenom(num), if(integerp(a)) then return(a)))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
k:3; n:2; fpprec;
block([],
bfloat(mod(ratnum(pidigits(k))/(ratdenom(pidigits(k))), 10^(-n)))), fpprec:8;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratnum(pidigits(3))/ratdenom(pidigits(3)), bfloat;
mod(ratnum(pidigits(3))/ratdenom(pidigits(3)), 10^-2 ), bfloat, fpprec:8;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pidigits(32);
ratnum(pidigits(16)); ratdenom(pidigits(16));
ratnum(pidigits(32))/ratdenom(pidigits(32)), bfloat;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pidigits(prec):=
block([fpprec], 
expr:1.0*10^-(prec),  
ratprint:false, bftorat:true, ratepsilon:expr, float2bf:true, 
ans:float((%pi-mod(%pi, 10^(-prec)))),  
return(ans), fpprec:prec)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
lastdigits(fnum, lastn):=
block([n:lastn, ans], 
/* it doesn't help when lastn is bigger than the total digits in fnum
 it returns the whole digits in fnum anyway without erroring! 
and fnum=%pi stuff works only upto 8 digits cause num(rat(fnum)) has so
much only! */
ratprint:false, 
ratepsilon:2.0e-16, bftorat:true, float2bf:true, 

ratio(num):=block([k, a], ratprint:false, 
for k:1 thru fpprec do (a:10^k/ratdenom(num), if(integerp(a)) then return(a))), 

m:rat(ev(fnum)), 
ans:mod(ratio(fnum)*num(m), (10^n))/(ratio(fnum)*denom(m)), 
return(bfloat(ans)))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
lastdigits(fnum, lastn):=
block([n:lastn, ans, fpprec, ans2], 
ratprint:false, 
ratepsilon:1.0e-16, bftorat:true, float2bf:true, 
ans:bfloat(mod(ratnum(fnum)/ratdenom(fnum), (10^-n))), fpprec:n+1,  
ans2: ev(bfloat(ans), fpprec:n),   
return(ans2))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
fpprec:16;
lastdigits(4.1459, 3);
lastdigits(4.1459, 2);
lastdigits(3.14598, 3);
pidigits(16);
pidigits(8);
lastdigits(pidigits(8), 2);
pidigits(9);
pidigits(20);
lastdigits(pidigits(10), 8);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
bfpidigits(prec):=
block([fpprec:prec], 
ratprint:false, bftorat:false, 
ans:sum((2*n!)/(2*n+1)!!, n, 0, 10^3), bfloat, fpprec:fpprec, 
bfloat(ans))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
makelist(ratio(fpidigits(n)), n, 1, 4);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
rationalize(float(%pi))/rat(float(%pi)), bfloat;
rat(float(%pi))/rationalize(float(%pi)), bfloat;
mod(float(%pi), rat(float(%pi))), float;
mod(bfloat(%pi), rat(bfloat(%pi))), bfloat;
mod(%pi, float(%pi)), bfloat;
mod(%pi, rat((%pi))), float;
mod(%pi, rat((%pi))), numer;
mod(%pi, rat((%pi))), bfloat;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pidigits(prec):=
block([fpprec:prec], 
ans:bfloat(%pi), fpprec:fpprec,  
return(ans))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pidigits(3);
lastdigits(pidigits(3), 2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
lastdigits(pidigits(32), 3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
rat(float(%pi)); rat(bfloat(%pi));
rationalize(float(%pi)); rationalize(bfloat(%pi));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
rat(float(%pi))/rat(bfloat(%pi)), bfloat;
rat(bfloat(%pi))/rat(float(%pi)), bfloat;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
1-(rat(float(%pi))/rationalize(float(%pi))), bfloat, fpprec:64;
rationalize(float(%pi))/rat(float(%pi))-1, bfloat, fpprec:64;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(rat(bfloat(%pi))/rationalize(bfloat(%pi)))-1, bfloat, fpprec:64;
1-rationalize(bfloat(%pi))/rat(bfloat(%pi)), bfloat, fpprec:64;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
1-(rat(bfloat(%pi))/rationalize(bfloat(%pi))), bfloat, fpprec:52;
rationalize(bfloat(%pi))/rat(bfloat(%pi))-1, bfloat, fpprec:52;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
:lisp (values 
            (list most-positive-short-float 
                  most-negative-short-float) 

            (list least-positive-short-float 
                  least-negative-short-float) 

            (list least-positive-normalized-short-float  
                  least-negative-normalized-short-float) 

            (list most-positive-double-float 
                  most-negative-double-float) 

            (list least-positive-double-float 
                  least-negative-double-float) 

            (list least-positive-normalized-double-float 
                  least-negative-normalized-double-float) 
            
            (list most-positive-single-float 
                  most-negative-single-float) 

            (list least-positive-single-float 
                  least-negative-single-float) 

            (list least-positive-normalized-single-float 
            least-negative-normalized-single-float) 
            
            (list most-positive-long-float 
                  most-negative-long-float) 

            (list least-positive-long-float 
                  least-negative-long-float) 

            (list least-positive-normalized-long-float 
                  least-negative-normalized-long-float));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
tellsimp(1/0, inf), simp:false;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
tellsimp(-1/0, minf), simp:false;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
1/0; -1/0; subst([1/0=inf], 1/[y1, 0]), simp:false;
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
